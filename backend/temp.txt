const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "GET,HEAD,POST,OPTIONS",
  "Access-Control-Allow-Headers": "*",
  "Access-Control-Max-Age": "86400",
};

const handleRequest = async (c: any) => {

  const url = new URL(c.req.url);
  const apiUrl = url.searchParams.get("apiurl");

  console.log(apiUrl);

  if (!apiUrl) {
    return c.text("Missing apiurl parameter", 400);
  }

  const requestBody = await c.req.arrayBuffer();

  const request = new Request(apiUrl, {
    method: c.req.method,
    headers: c.req.headers,
    body: requestBody,
  });





  request.headers.set("Origin", new URL(apiUrl).origin);

  const response = await fetch(request);
  const newResponse = new Response(response.body, response);

  newResponse.headers.set("Access-Control-Allow-Origin", "*");
  newResponse.headers.append("Vary", "Origin");

  return newResponse;
};

const handleOptions = async (c: any) => {
  if (
    c.req.header("Origin") &&
    c.req.header("Access-Control-Request-Method") &&
    c.req.header("Access-Control-Request-Headers")
  ) {
    return c.newResponse(null, {
      headers: {
        ...corsHeaders,
        "Access-Control-Allow-Headers": c.req.header("Access-Control-Request-Headers"),
      },
    });
  } else {
    return c.newResponse(null, {
      headers: {
        Allow: "GET, HEAD, POST, OPTIONS",
      },
    });
  }
};

app.use("/corsproxy/*", async (c, next) => {
  if (c.req.method === "OPTIONS") {
    return handleOptions(c);
  } else if (["GET", "HEAD", "POST"].includes(c.req.method)) {
    return handleRequest(c);
  } else {
    return c.newResponse(null, { status: 405, statusText: "Method Not Allowed" });
  }
});